# 15.1 리액트 프로젝트를 시작할 때 고려해야 할 사항

## 15.1.1 유지보수 중인 서비스라면 리액트 버전을 최소 16.8.6에서 최대 17.0.2로 올려두자

- 리액트 16.8은 중요한 업데이트가 이뤄졌는데, 훅이 소개되고 훅 덕분에 함수형 컴포넌트의 개념이 정립됐습니다. 그렇기 때문에 향후 원활한 지원을 위해 버전을 16.8.6 이상으로 맞추는 것이 좋고, 17 버전은 호환성이 깨지는 업데이트를 최소화한 버전이므로 17 버전으로 가는 것도 좋습니다.

## 15.1.2 인터넷 익스플로러 11 지원을 목표한다면 각별히 더 주의를 기한다

- 리액트, Next.js, query-string 등의 주요 라이브러리 등은 IE 11을 지원하지 않기 때문에 레거시 브라우저를 지원해야 하는 경우 주의를 기울여야 합니다.

## 15.1.3 서버 사이드 렌더링 애플리케이션을 우선적으로 고려한다

- SPA의 대부분의 경우 상대적으로 성능 측정에서 좋은 결과를 얻기 어렵기 때문에 SSR를 고려하는 것이 좋습니다. VOC(voice of customer)의 대부분은 평범한 사용자가 아닌 극단적으로 분류될 수 있는 사용자로부터 나오기 때문에 가능한 평균적으로 우수한 성능을 지니는 웹사이트를 제공하는 편이 좋습니다.

## 15.1.4 상태 관리 라이브러리는 꼭 필요할 때만 사용한다

- 리덕스가 필요였던 시절을 지나 이제는 Context API와 훅의 등장으로 props drilling 없이도 하위 컴포넌트에 상태값을 전달이 가능하기 때문에 꼭 필요한지 다시 생각해 볼 필요가 있습니다.

## 15.1.5 리액트 의존성 라이브러리 설치를 조심한다

- 리액트에 의존적인 라이브러리를 설치하려고 하는 경우 대부분 `react-**` 같은 이름을 갖고 있으며, 대부분 다음과 같은 리액트에 대한 의존성을 갖고 있습니다.
    
    ```json
    {
    	"peerDependencies": {
    		"react": "^16.8.6 || ^17.0.0",
    		"react-dom": "^16.8.6 || ^17.0.0"
    	}
    }
    ```
    
- 이때 반드시 이 `peerDependencies`가 설치하고자 하는 프로젝트의 리액트 버전과 맞는지 확인해야 합니다.

# 15.2 언젠가 사라질 수도 있는 리액트

## 15.2.1 리액트는 그래서 정말 완벽한 라이브러리인가?

- 리액트를 반대하는 사람들의 의견은 다음과 같습니다.

### 클래스형 컴포넌트에서 함수형 컴포넌트로 넘어오면서 느껴지는 혼란

- 공식 문서나 레퍼런스 자료들이 그 방식이 혼용되어 있고, 함수형 컴포넌트부터 학습했다고 해도 클래스형 컴포넌트를 알아야 하는 게 아닌지 찝찝함이 남을 수 있습니다.

### 너무 방대한 자유가 주는 혼란

- 리액트 기반 프로젝트에서 스타일 작성이나 상태 관리를 하기 위한 다양한 옵션이 존재하기 때문에 도리어 파편화된 기술 스택이 새로운 리액트 개발자에게 장애물이 될 수도 있습니다.
- 이 외에도 비직관적인 JSX, 너무 급진적으로 변화하는 API 등 리액트를 선호하지 않는 진영의 주장들이 존재합니다.

## 15.2.2 오픈소스 생태계의 명과 암

### 페이스북 라이선스 이슈

- 오픈소스 라이선스 중 가장 널리 쓰이는 라이선스를 꼽는다면 MIT 라이선스인데, 오픈소스 소프트웨어를 상업적으로 이용하거나 배포, 개인적으로 이용하는 등에 대한 어떠한 제약 없이 소프트웨어를 취급할 수 있는 매우 자유로운 라이선스 중 하나입니다. 그러나 페이스북은 React, Immutable, Jest 등 자사 오픈소스에 MIT 라이선스 대신 BSD+Patents 라이선스를 사용하고 있었습니다. 아 라이선스는 다른 라이선스와 다르게 ‘이 라이선스를 적용한 소프트웨어에 대해서 특정한 사건이 발생한다면 라이선스가 통지 없이 종료될 수 있다’라는 한 가지 눈에 띄는 조항이 있었습니다.
- 2017년 7월, 오픈소스 소프트웨어 프로젝트를 운영하는 아파치 재단에서 BSD+Parents 라이선스 사용을 금지한다고 밝혔습니다. 페이스북은 이 조항을 철회할 의사가 없다고 밝혔으나 커뮤니티의 찬반과 워드프레스 진영에서의 반대 등으로 결국 해당 특허권을 삭제하고 MIT 라이선스로 넘어갔습니다.
- 개발자들에게는 자신이 오픈소스로 만든 소프트웨어에 대한 권리를 한순간에 잃어버릴 수도 있다는 경각심을 갖게 하는 계기가 되었습니다.

### 오픈소스는 무료로 계속 제공될 수 있는가? colors.js, faker.js, 그리고 바벨

- 바벨은 풀타임 개발자를 고용해 급여를 주고 있지만 2021년 5월 재정난을 겪고 있다는 글이 올라왔고, 연간 330,000달러가 필요하며, 이를 위한 모금을 계속 하고 있다고 밝혔습니다. colors.js와 faker.js는 급진적인 사례인데, 버전 업데이트를 하면서 코드에 악의적인 행위를 가했고 그 이유에 대해서 포춘 500대 기업을 대상으로 무료로 소프트웨어를 배포하는 일을 하지 않을 거라고 밝혔습니다. 오픈소스 덕분에 손쉽게 개발을 하고 있지만, 오픈소스가 무슨 일을 하고 있는지 알 필요도 있습니다.

## 15.2.3 제이쿼리, AngularJS, 리액트, 그리고 다음은 무엇인가?

- 스프링, ASP.NET, Rails, PHP 등의 웹 프레임워크에서 독립해 프론트엔드 영역의 중요성이 각광받기 시작한 것은 얼마 되지 않은 일입니다. 점차 프론트엔드 프레임워크는 증가하고 있고, 리액트는 가장 많이 쓰이고 있지만, 앞서 말한 것처럼 리액트에 대한 부정적인 의견들도 존재하기 때문에 유연한 자세를 가질 필요가 있습니다.

## 15.2.4 웹 개발자로서 가져야 할 유연한 자세

- 최근 느린 자바스크립트를 대신할 하나의 방안으로 웹어셈블리(WebAssembly)가 떠오르기도 하고, 자바스크립트로 실행되는 도구를 대체하기 위한 러스트로 작성된 도구들이 주목받기도 합니다. 변덕스러운 개발자 커뮤니티에서 기술은 언제 대체될지 모르기 때문에 리액트에 의존적이지 않은 유연한 자세를 가질 필요성이 있습니다.